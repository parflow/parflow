# This format is based on the GNU configuration supplied with uncrustify.
# Attempted to match emacs GNU style.  The main difference is braces
# are note indented.  Emacs configuration changes:
# ;; GNU customizations
# (defun my-c-mode-common-hook ()
#  (c-set-style "gnu")
#  (setq c-tab-always-indent t)
#  (c-set-offset 'substatement-open 0)
#  (c-set-offset 'statement-case-open 0)
#  (c-set-offset 'case-label '+)
# )

# Begin ParFlow deviations from GNU and custom uncrustify
# Do not indent brace
indent_brace			= 0
# Switch statements looked terrible with indent_brace=0 so indent the
# case statements:
indent_switch_case              = 2

align_func_params               = true

cmt_indent_multi                = true
cmt_star_cont         		= true

# This will align trailing \ on macro defines
align_nl_cont                   = 3

# Use Unix LF line endings
newlines                        = LF

# Convert all tabs to spaces in comments.
cmt_convert_tab_to_spaces       = true

# Indent function call params to the '('
indent_func_call_param          = false

indent_var_def_cont=false
indent_func_def_param=false
indent_func_proto_param=false
indent_func_class_param=false
indent_func_ctor_var_param=false
indent_template_param=false
indent_paren_nl=true

# ParFlow Additions

# The span for aligning on '#define' bodies (0=don't align)
align_pp_define_span            = 0      # number

# End ParFlow deviations from GNU and custom uncrustify

# This is original Uncrustify GNU format

indent_with_tabs		= 0		# 0 use spaces
input_tab_size			= 8		# original tab size
output_tab_size			= 8		# new tab size
indent_columns			= 2
# indent_label			= 2		# pos: absolute col, neg: relative column
indent_align_string		= False		# align broken strings

nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			= add		# "do {" vs "do \n {"
nl_if_brace			= add		# "if () {" vs "if () \n {"
nl_for_brace			= add		# "for () {" vs "for () \n {"
nl_else_brace			= add		# "else {" vs "else \n {"
nl_while_brace			= add		# "while () {" vs "while () \n {"
nl_switch_brace			= add		# "switch () {" vs "switch () \n {"
# nl_func_var_def_blk		= 1
nl_var_def_blk_end_func_top     = 1
nl_before_case			= 1
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= true
nl_brace_while			= add
nl_brace_else			= add
nl_squeeze_ifdef		= true

# mod_paren_on_return		= ignore	# "return 1;" vs "return (1);"
#mod_full_brace_if		= force		# "if (a) a--;" vs "if (a) { a--; }"
#mod_full_brace_for		= force		# "for () a--;" vs "for () { a--; }"
#mod_full_brace_do		= force		# "do a--; while ();" vs "do { a--; } while ();"
#mod_full_brace_while		= force		# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= remove	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove
sp_inside_fparen		= remove
sp_inside_sparen		= remove
#sp_type_func			= ignore
sp_assign			= force
sp_arith			= force
sp_bool				= force
sp_compare			= force
sp_after_comma			= force
sp_func_def_paren		= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"

# align_with_tabs			= FALSE		# use tabs to align
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= true
# align_var_def_span		= 2
# align_var_def_inline		= true
# align_var_def_star		= true
# align_var_def_colon		= true
# align_assign_span		= 1
# align_struct_init_span		= 3
# align_var_struct_span		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap		= 4
# align_number_left		= true
# align_typedef_span		= 5
# align_typedef_gap		= 3

# cmt_star_cont			= true

eat_blanks_before_close_brace	= true
eat_blanks_after_open_brace	= true


# indent_continue                 = indent_columns


